import java.util.*; 
 import java.io.*; 
 import java.lang.*; 
  
public class MStree { 
  
static Scanner input = new Scanner (System.in); 
 public static void main(String[] args) { 
  
ArrayList<Arce> tree = new ArrayList<Arce>(); 
  
System.out.println("Enter the number of Nodes: "); //no. of nodes 
 int node=input.nextInt(); 
  
System.out.println("Enter the number of Arces: "); //no. of arces 
 int arces=input.nextInt(); 
  
for(int i=0;i<arces;i++){ 
 System.out.println("Enter 'From' node: \n"); 
 int n=input.nextInt();// from node 
 System.out.println("Enter 'To' node: \n"); 
 int adj= input.nextInt(); //to node 
  
System.out.println("Enter the distance:"); 
 int distance= input.nextInt();// distance  
 
Arce newArce = new Arce(n, adj,distance); 
 tree.add(newArce); //adds the new arce  
}//loop 
  
 
MStree SpanningTree = new MStree();//creating tree 
  
SpanningTree.FindSpanningTree(tree, node);//finding minimum spanning tree 
  
} 
  
public void FindSpanningTree(ArrayList<Arce> tree, int count){ 
 String s="";//output message 
 int arcDistance=0; //distance between arces 
 Collections.sort(tree); 
  
ArrayList<Arce> arces = new ArrayList<Arce>(); 
 DisjointSet Set = new DisjointSet(count+1); 
  
for(int i=0; i<tree.size() && arces.size()<(count-1); i++){ 
 Arce current = tree.get(i); 
 int First_root = Set.findKey(current.getV1()); 
 int Second_root = Set.findKey(current.getV2()); 
  
if(First_root != Second_root){ 
 arces.add(current); 
 Set.union(First_root, Second_root); 
 }//end if 
  
}//end for loop 
  
s= s +" \n Minimum Spanning Tree has "+arces.size()+" arces"; 
  
 
for(Arce arce: arces){ 
  
s= s + arce +"\n"; 
 arcDistance= arcDistance + arce.getDistance(); 
 }//end for 
  
s+="The total cost of the Minimum Spanning Tree is= "+arcDistance; 
 System.out.println(s); 
 }//method 
 }//end class 
